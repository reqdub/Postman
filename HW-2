# 1.
## http://162.55.220.72:5005/first
## Отправить запрос - получить статус-код 200.

 pm.test("Status code is 200", function () {
     pm.response.to.have.status(200);
 });
 
`rgb(0, 0, 210)` Проверить, что в body приходит правильный string.

 pm.test("Body matches string", function () {
     pm.expect(pm.response.text()).to.include("This is the first responce from server!ss");
 });
2
http://162.55.220.72:5005/user_info_3

Отправить запрос.

Статус-код 200.

 pm.test("Status code is 200", function () { 
     pm.response.to.have.status(200);
 });
Спарсить response body в json.

 var jsonResponse = pm.response.json(); 
Проверить, что name в ответе равно name в request (name вбить руками).

 pm.test("Name is correct", function () { 
     pm.expect(jsonResponse.name).to.eql("doshik");    
 });
Проверить, что age в ответе равно age в request (age вбить руками).

 pm.test("Age is correct", function () {
     pm.expect(jsonResponse.age).to.eql("48");    
 });
Проверить, что salary в ответе равно salary в request (salary вбить руками).

 pm.test("Salary is correct", function () {
     pm.expect(jsonResponse.salary).to.eql(100000);    
 })
Спарсить request.

 var Request = pm.request.body.formdata;
Проверить, что name в ответе равно name в request (name забрать из request).

 pm.test("Name is correct_2", function () {
     pm.expect(jsonResponse.name).to.eql(Request.get("name"));    
 });
Проверить, что age в ответе равно age в request (age забрать из request).

 pm.test("Age is correct_2", function () {
     pm.expect(jsonResponse.age).to.eql(Request.get("age"));    
 });
Проверить, что salary в ответе равно salary в request (salary забрать из request).

pm.test("Salary is correct_2", function () {
    pm.expect(jsonResponse.salary).to.eql(+Request.get("salary"));       
}); 
Вывести в консоль параметр family из response.

console.log(jsonResponse.family)
Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request).

pm.test("Salary_1_5_year is correct", function () {
    pm.expect(jsonResponse.family.u_salary_1_5_year).to.eql(Request.get("salary")*4);         
}); 
3
http://162.55.220.72:5005/object_info_3

Отправить запрос.

Статус-код 200.

 pm.test("Status code is 200", function () { 
     pm.response.to.have.status(200);
 });
Спарсить response body в json.

 var jsonResponse = pm.response.json(); 
Спарсить request.

 var Request = pm.request.url.query;
Проверить, что name в ответе равно name в request (name забрать из request).

 pm.test("Name is correct", function () {
     pm.expect(jsonResponse.name).to.eql(Request.get("name"));    
 });
Проверить, что age в ответе равно age в request (age забрать из request).

 pm.test("Age is correct", function () {
     pm.expect(jsonResponse.age).to.eql(Request.get("age"));      
 });
Проверить, что salary в ответе равно salary в request (salary забрать из request).

 pm.test("Salary is correct", function () {
     pm.expect(jsonResponse.salary).to.eql(+Request.get("salary"));          
 }); 
Вывести в консоль параметр family из response.

 console.log(jsonResponse.family)
Проверить, что у параметра dog есть параметр name.

 pm.test("dog has name", function () {
    pm.expect(jsonResponse.family.pets.dog).property("name");         
 }); 
Проверить, что у параметра dog есть параметр age.

pm.test("dog has age", function () {
   pm.expect(jsonResponse.family.pets.dog).property("age");         
}); 
Проверить, что параметр name имеет значение Luky.

pm.test("dog's name is correct", function () {
   pm.expect(jsonResponse.family.pets.dog.name).to.eql("Luky");         
}); 
Проверить, что параметр age имеет значение 4.

pm.test("dog's age is correct", function () {
   pm.expect(jsonResponse.family.pets.dog.age).to.eql(4);         
}); 
4
http://162.55.220.72:5005/object_info_4

Отправить запрос.

Статус-код 200.

 pm.test("Status code is 200", function () { 
     pm.response.to.have.status(200);
 });
Спарсить response body в json.

 var Response = pm.response.json(); 
Спарсить request.

 var Request = pm.request.url.query;
Проверить, что name в ответе равно name в request (name забрать из request).

 pm.test("Name is correct", function () {
     pm.expect(Response.name).to.eql(Request.get("name"));    
 });
Проверить, что age в ответе равно age из request (age забрать из request).

 pm.test("Age is correct", function () {
     pm.expect(Response.age).to.eql(+Request.get("age"));      
 });
Вывести в консоль параметр salary из request.

 console.log(Request.get("salary"));  
Вывести в консоль параметр salary из response.

 console.log(Response.salary);  
Вывести в консоль 0-й элемент параметра salary из response.

 console.log(Response.salary[0]);  
Вывести в консоль 1-й элемент параметра salary параметр salary из response.

console.log(Response.salary[1]); 
Вывести в консоль 2-й элемент параметра salary параметр salary из response.

console.log(Response.salary[2]); 
Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request).

pm.test("salary0 is correct", function () {
   pm.expect(Response.salary[0]).eql(+Request.get("salary"));           
}); 
Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request).

pm.test("salary1 is correct", function () {
   pm.expect(Response.salary[1]).eql+(Request.get("salary")*2);        
}); 
Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request).

pm.test("salary2 is correct", function () {
   pm.expect(Response.salary[2]).eql+(Request.get("salary")*3);        
});
Создать в окружении переменную name.

Передать в окружение переменную name.

pm.environment.set("name", (Request.get("name")));
Создать в окружении переменную age.

Передать в окружение переменную age.

pm.environment.set("age", (Request.get("age")));
Создать в окружении переменную salary.

Передать в окружение переменную salary.

pm.environment.set("salary", (Request.get("salary")));
Написать цикл, который выведет в консоль по порядку элементы списка из параметра salary.

Response.salary.forEach(element=>console.log(element));
5
http://162.55.220.72:5005/user_info_2

Вставить параметр salary из окружения в request.
Вставить параметр age из окружения в age.
Вставить параметр name из окружения в name.
Указанные параметры вносим в body запроса в формате form-data, в значении указываем переменную, созданную в окружении в предыдущем задании

